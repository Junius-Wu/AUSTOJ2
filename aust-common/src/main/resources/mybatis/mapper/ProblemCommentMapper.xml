<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.edu.aust.common.mapper.ProblemCommentMapper" >
  <resultMap id="BaseResultMap" type="cn.edu.aust.common.entity.ProblemComment" >
      <id column="id" jdbcType="INTEGER" javaType="java.lang.Integer" property="id"/>
      <result property="problemId" column="problem_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="userId" column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="firendId" column="firend_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="likecount" column="likecount" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="rootId" column="root_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="status" column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <result property="createdate" column="createdate" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <result property="modifydate" column="modifydate" jdbcType="TIMESTAMP" javaType="java.util.Date" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.edu.aust.common.entity.ProblemComment" >
      <id column="id" jdbcType="INTEGER" javaType="java.lang.Integer" property="id"/>
      <result property="problemId" column="problem_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="userId" column="user_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="firendId" column="firend_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="likecount" column="likecount" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="rootId" column="root_id" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <result property="status" column="status" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <result property="createdate" column="createdate" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <result property="modifydate" column="modifydate" jdbcType="TIMESTAMP" javaType="java.util.Date" />
      <result property="content" column="content" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, problem_id, user_id, firend_id, likecount, root_id, status, createdate, modifydate
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from problem_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from problem_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.edu.aust.common.entity.ProblemComment" >
    insert into problem_comment (id, problem_id, user_id,
    firend_id, likecount, root_id,
    status, createdate, modifydate,
    content)
    values (#{id,jdbcType=INTEGER}, #{problemId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
    #{firendId,jdbcType=INTEGER}, #{likecount,jdbcType=INTEGER}, #{rootId,jdbcType=INTEGER},
    #{status,jdbcType=TINYINT}, #{createdate,jdbcType=TIMESTAMP}, #{modifydate,jdbcType=TIMESTAMP},
    #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.aust.common.entity.ProblemComment" >
    insert into problem_comment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="problemId != null" >
        problem_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="firendId != null" >
        firend_id,
      </if>
      <if test="likecount != null" >
        likecount,
      </if>
      <if test="rootId != null" >
        root_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createdate != null" >
        createdate,
      </if>
      <if test="modifydate != null" >
        modifydate,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="problemId != null" >
        #{problemId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="firendId != null" >
        #{firendId,jdbcType=INTEGER},
      </if>
      <if test="likecount != null" >
        #{likecount,jdbcType=INTEGER},
      </if>
      <if test="rootId != null" >
        #{rootId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createdate != null" >
        #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifydate != null" >
        #{modifydate,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.aust.common.entity.ProblemComment" >
    update problem_comment
    <set >
      <if test="problemId != null" >
        problem_id = #{problemId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="firendId != null" >
        firend_id = #{firendId,jdbcType=INTEGER},
      </if>
      <if test="likecount != null" >
        likecount = #{likecount,jdbcType=INTEGER},
      </if>
      <if test="rootId != null" >
        root_id = #{rootId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="createdate != null" >
        createdate = #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifydate != null" >
        modifydate = #{modifydate,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.aust.common.entity.ProblemComment" >
    update problem_comment
    set problem_id = #{problemId,jdbcType=INTEGER},
    user_id = #{userId,jdbcType=INTEGER},
    firend_id = #{firendId,jdbcType=INTEGER},
    likecount = #{likecount,jdbcType=INTEGER},
    root_id = #{rootId,jdbcType=INTEGER},
    status = #{status,jdbcType=TINYINT},
    createdate = #{createdate,jdbcType=TIMESTAMP},
    modifydate = #{modifydate,jdbcType=TIMESTAMP},
    content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.aust.common.entity.ProblemComment" >
    update problem_comment
    set problem_id = #{problemId,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=INTEGER},
      firend_id = #{firendId,jdbcType=INTEGER},
      likecount = #{likecount,jdbcType=INTEGER},
      root_id = #{rootId,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      createdate = #{createdate,jdbcType=TIMESTAMP},
      modifydate = #{modifydate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--关联User的Map查询详细字段-->
  <resultMap id="commentBlobSUser" type="cn.edu.aust.common.entity.pojo.ProblemCommentUser" extends="ResultMapWithBLOBs">
    <association property="user" column="user_id" select="cn.edu.aust.common.mapper.UserMapper.selectBaseByPk"/>
    <association property="friend" column="firend_id" select="cn.edu.aust.common.mapper.UserMapper.selectBaseByPk"/>
  </resultMap>


  <!--按照参数查找-->
  <select id="selectParams" parameterType="cn.edu.aust.common.mybatis.QueryParams" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM problem_comment
    <where>
      <include refid="BasicMapper.buildParam"/>
    </where>
  </select>
  <!--按照参数查找,返回详细加关联用户,返回详细字段-->
  <select id="selectParamsWithUser" parameterType="cn.edu.aust.common.mybatis.QueryParams" resultMap="commentBlobSUser">
    SELECT
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM problem_comment
    <where>
      <include refid="BasicMapper.buildParam"/>
    </where>
  </select>
  <!--根据根节点删除旗下的评论-->
  <delete id="deleteByRootId" parameterType="integer">
    DELETE FROM problem_comment WHERE root_id=#{root_id}
  </delete>
</mapper>